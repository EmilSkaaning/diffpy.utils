##############################################################################
#
# diffpy.util       by DANSE Diffraction group
#                   Simon J. L. Billinge
#                   (c) 2010 Trustees of the Columbia University
#                   in the City of New York.  All rights reserved.
#
# File coded by:    Timur Dykhne, Chris Farrow, Pavol Juhas
#
# See AUTHORS.txt for a list of people who contributed.
# See LICENSE.txt for license information.
#
##############################################################################

import re

def loadData(filename, minrows=10, mincols=2, usecols=(0, 1), unpack=True,
        delimiter=None):
    """Find and load data from a text file.  
    
    The data reading starts at the first matrix block of at least minrows rows
    and mincols columns.  This seems to work for most of the datafiles
    including those generated by PDFGetX2.

    filename -- name of the file we want to load data from.
    minrows  -- minimum number of rows in the first data block.
                All rows must have the same number of floating point values.
    mincols  -- minimum number of floating point values in each row.
    usecols  -- zero-based index of columns to be loaded
    unpack   -- return data as a sequence of columns that allows tuple
                unpacking such as  x, y = loadData('filename.dat')
    delimiter -- the string used to separate values.
                By default, this is any whitespace.

    Return a numpy array of the data.
    See also numpy.loadtxt for more details.
    """
    from numpy import array, loadtxt
    # Check if a line consists of floats only and return their count
    # Return zero if some strings cannot be converted.
    def countfloats(line):
        try:
            nf = len(map(float, line.split(delimiter)))
        except ValueError:
            nf = 0
        return nf
    fid = open(filename, 'rb')
    # search for the start of datablock
    start = None
    fpos = 0
    for line in fid:
        fpos += len(line)
        nc = countfloats(line)
        if nc < mincols:
            start = None
            continue
        # nc is acceptable here
        if start is None:
            ncols = nc
            nrows = 0
            start = fpos - len(line)
        # ncols is defined here, require the same number of columns
        # throughout the datablock
        if nc != ncols:
            start = None
            continue
        nrows += 1
        # block was found here!
        if nrows >= minrows:
            break
    # Return an empty array when no data found.
    # loadtxt would otherwise raise an exception on loading from EOF.
    if start is None:
        rv = array([], dtype=float)
    else:
        fid.seek(start)
        rv = loadtxt(fid, usecols=usecols, unpack=unpack, delimiter=delimiter)
    return rv

__id__ = "$Id$"
# End of file
